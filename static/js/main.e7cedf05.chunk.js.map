{"version":3,"sources":["serviceWorker.js","constants/routes.js","components/App/Firebase/context.js","components/App/Firebase/firebase.js","components/App/Firebase/index.js","components/auth/SignUp/index.js","components/auth/SignIn/index.js","components/auth/SignOut/index.js","components/App/Session/context.js","components/App/Navigation/index.js","components/App/index.js","components/App/Session/withAuthentication.js","index.js"],"names":["Boolean","window","location","hostname","match","HOME","FirebaseContext","React","createContext","withFirebase","Component","props","Consumer","firebase","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","app","initializeApp","this","INITIAL_STATE","username","passwordOne","passwordTwo","error","SignUpFormBase","onSubmit","event","state","then","setState","history","push","ROUTES","catch","preventDefault","onChange","target","name","value","isInvalid","type","placeholder","disabled","message","SignUpLink","to","SignUpForm","compose","withRouter","SignUpPage","SignInFormBase","SignInForm","SignInPage","onClick","AuthUserContext","NavigationAuth","SignOut","NavigationNonAuth","Navigation","authUser","withAuthentication","WithAuthentication","listener","onAuthStateChanged","Provider","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7cedf05.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const LANDING = '/';\r\nexport const SIGN_UP = '/signup';\r\nexport const SIGN_IN = '/signin';\r\nexport const HOME = '/home';\r\nexport const ACCOUNT = '/account';\r\nexport const ADMIN = '/admin';\r\nexport const PASSWORD_FORGET = '/pw-forget';","import React from 'react';\r\n\r\nconst FirebaseContext = React.createContext(null);\r\n\r\nexport const withFirebase = Component => props => (\r\n    <FirebaseContext.Consumer>\r\n        {firebase => <Component {...props} firebase={firebase} />}\r\n    </FirebaseContext.Consumer>\r\n);\r\n\r\nexport default FirebaseContext;","import app from 'firebase/app';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n};\r\n\r\nclass Firebase {\r\n    constructor() {\r\n        app.initializeApp(config);\r\n        this.auth = app.auth();\r\n    }\r\n\r\n    // *** Auth API ***\r\n    doCreateUserWithEmailAndPassword = (email, password) =>\r\n        this.auth.createUserWithEmailAndPassword(email, password);\r\n\r\n    doSignInWithEmailAndPassword = (email, password) =>\r\n        this.auth.signInWithEmailAndPassword(email, password);\r\n\r\n    doSignOut = () => this.auth.signOut();\r\n\r\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\r\n    \r\n    doPasswordUpdate = password =>\r\n        this.auth.currentUser.updatePassword(password);\r\n}\r\nexport default Firebase;","import FirebaseContext, { withFirebase } from './context';\r\nimport Firebase from './firebase';\r\n\r\nexport default Firebase;\r\n\r\nexport { FirebaseContext, withFirebase };\r\n","import React, { Component } from 'react';\r\nimport { withFirebase } from '../../App/Firebase';\r\nimport * as ROUTES from '../../../constants/routes';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { compose } from 'recompose';\r\n\r\nconst SignUpPage = () => (\r\n    <div>\r\n        <h1>SignUp</h1>\r\n        <SignUpForm />\r\n    </div>\r\n);\r\n\r\n\r\nconst INITIAL_STATE = {\r\n    username: '',\r\n    email: '',\r\n    passwordOne: '',\r\n    passwordTwo: '',\r\n    error: null,\r\n};\r\n\r\nclass SignUpFormBase extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { ...INITIAL_STATE };\r\n    }\r\n\r\n    onSubmit = event => {\r\n        const { email, passwordOne } = this.state;\r\n        this.props.firebase\r\n            .doCreateUserWithEmailAndPassword(email, passwordOne)\r\n            .then(() => {\r\n                this.setState({ ...INITIAL_STATE });\r\n                this.props.history.push(ROUTES.HOME);\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error });\r\n            });\r\n        event.preventDefault();\r\n    }\r\n\r\n    onChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    render() {\r\n\r\n        const {\r\n            username,\r\n            email,\r\n            passwordOne,\r\n            passwordTwo,\r\n            error,\r\n        } = this.state;\r\n\r\n        const isInvalid =\r\n            passwordOne !== passwordTwo ||\r\n            passwordOne === '' ||\r\n            email === '' ||\r\n            username === '';\r\n\r\n        return (\r\n            <form onSubmit={this.onSubmit}>\r\n                <input\r\n                    name=\"username\"\r\n                    value={username}\r\n                    onChange={this.onChange}\r\n                    type=\"text\"\r\n                    placeholder=\"Full Name\"\r\n                />\r\n                <input\r\n                    name=\"email\"\r\n                    value={email}\r\n                    onChange={this.onChange}\r\n                    type=\"text\"\r\n                    placeholder=\"Email Address\"\r\n                />\r\n                <input\r\n                    name=\"passwordOne\"\r\n                    value={passwordOne}\r\n                    onChange={this.onChange}\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                />\r\n                <input\r\n                    name=\"passwordTwo\"\r\n                    value={passwordTwo}\r\n                    onChange={this.onChange}\r\n                    type=\"password\"\r\n                    placeholder=\"Confirm Password\"\r\n                />\r\n                <button disabled={isInvalid} type=\"submit\">\r\n                    Sign Up\r\n                </button>\r\n                {error && <p>{error.message}</p>}\r\n            </form>\r\n        );\r\n    }\r\n}\r\nconst SignUpLink = () => (\r\n    <p>\r\n        Don't have an account? <Link to={ROUTES.SIGN_UP}>Sign Up</Link>\r\n    </p>\r\n);\r\n\r\n\r\nconst SignUpForm = compose(\r\n    withRouter,\r\n    withFirebase,\r\n)(SignUpFormBase);\r\n\r\n\r\nexport default SignUpPage;\r\nexport { SignUpForm, SignUpLink };","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'recompose';\r\nimport * as ROUTES from '../../../constants/routes';\r\nimport { withFirebase } from '../../App/Firebase';\r\nimport { SignUpLink } from '../SignUp';\r\n\r\n\r\nconst SignInPage = () => (\r\n    <div>\r\n        <h1>SignIn</h1>\r\n        <SignInForm />\r\n        <SignUpLink />\r\n    </div>\r\n);\r\nconst INITIAL_STATE = {\r\n    email: '',\r\n    password: '',\r\n    error: null,\r\n};\r\nclass SignInFormBase extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { ...INITIAL_STATE };\r\n    }\r\n    onSubmit = event => {\r\n        const { email, password } = this.state;\r\n        this.props.firebase\r\n            .doSignInWithEmailAndPassword(email, password)\r\n            .then(() => {\r\n                this.setState({ ...INITIAL_STATE });\r\n                this.props.history.push(ROUTES.HOME);\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error });\r\n            });\r\n        event.preventDefault();\r\n    };\r\n    onChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n    render() {\r\n        const { email, password, error } = this.state;\r\n        const isInvalid = password === '' || email === '';\r\n        return (\r\n            <form onSubmit={this.onSubmit}>\r\n                <input\r\n                    name=\"email\"\r\n                    value={email}\r\n                    onChange={this.onChange}\r\n                    type=\"text\"\r\n                    placeholder=\"Email Address\"\r\n                />\r\n                <input\r\n                    name=\"password\"\r\n                    value={password}\r\n                    onChange={this.onChange}\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                />\r\n                <button disabled={isInvalid} type=\"submit\">\r\n                    Sign In\r\n        </button>\r\n                {error && <p>{error.message}</p>}\r\n            </form>\r\n        );\r\n    }\r\n}\r\nconst SignInForm = compose(\r\n    withRouter,\r\n    withFirebase,\r\n)(SignInFormBase);\r\nexport default SignInPage;\r\nexport { SignInForm };\r\n","import React from 'react';\r\nimport { withFirebase } from '../../App/Firebase';\r\n\r\nconst SignOutButton = ({ firebase }) => (\r\n    <button type=\"button\" onClick={firebase.doSignOut}>\r\n        Sign Out\r\n  </button>\r\n);\r\n\r\nexport default withFirebase(SignOutButton);","import React from 'react';\r\n\r\nconst AuthUserContext = React.createContext(null);\r\n\r\nexport default AuthUserContext;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as ROUTES from '../../../constants/routes';\r\nimport SignOutButton from '../../auth/SignOut';\r\nimport { AuthUserContext } from '../Session';\r\n\r\nconst Navigation = ({ authUser }) => (\r\n    <div>\r\n        <AuthUserContext.Consumer>\r\n            {authUser => \r\n                authUser ? <NavigationAuth /> : <NavigationNonAuth />}\r\n        </AuthUserContext.Consumer>\r\n\r\n    </div>\r\n); \r\n\r\nconst NavigationAuth = () => (\r\n    <ul>\r\n        <li>\r\n            <Link to={ROUTES.LANDING}>Landing</Link>\r\n        </li>\r\n        <li>\r\n            <Link to={ROUTES.HOME}>Home</Link>\r\n        </li>\r\n        <li>\r\n            <Link to={ROUTES.ACCOUNT}>Account</Link>\r\n        </li>\r\n        <li>\r\n            <SignOutButton />\r\n        </li>\r\n    </ul>\r\n);\r\n\r\nconst NavigationNonAuth = () => (\r\n    <ul>\r\n        <li>\r\n            <Link to={ROUTES.LANDING}>Landing</Link>\r\n        </li>\r\n        <li>\r\n            <Link to={ROUTES.SIGN_IN}>Sign In</Link>\r\n        </li>\r\n    </ul>\r\n);\r\n\r\nexport default Navigation;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n// import PasswordForgetPage from '../auth/PasswordForget';\n// import HomePage from '../auth/Home';\n// import AccountPage from '../auth/Account';\n// import AdminPage from '../auth/Admin';\nimport * as ROUTES from '../../constants/routes';\nimport SignInPage from '../auth/SignIn';\n// import LandingPage from '../auth/Landing';\nimport SignUpPage from '../auth/SignUp';\nimport Navigation from './Navigation';\nimport { withAuthentication } from './Session';\n\n\n\nconst App = () => (\n    <Router>\n        <div>\n            <Navigation />\n            <hr />\n            {/* <Route exact path={ROUTES.LANDING} component={LandingPage} /> */}\n            <Route path={ROUTES.SIGN_UP} component={SignUpPage} />\n            <Route path={ROUTES.SIGN_IN} component={SignInPage} />\n            {/* <Route path={ROUTES.PASSWORD_FORGET} component={PasswordForgetPage} />\n                        <Route path={ROUTES.HOME} component={HomePage} /> */}\n            {/* <Route path={ROUTES.ACCOUNT} component={AccountPage} />\n                        <Route path={ROUTES.ADMIN} component={AdminPage} /> */}\n        </div>\n    </Router>\n)\n\nexport default withAuthentication(App);\n","import React from 'react';\r\nimport AuthUserContext from './context';\r\nimport { withFirebase } from '../Firebase';\r\n\r\nconst withAuthentication = Component => {\r\n    class WithAuthentication extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n                authUser: null,\r\n            };\r\n        }\r\n        componentDidMount() {\r\n            this.listener = this.props.firebase.auth.onAuthStateChanged(\r\n                authUser => {\r\n                    authUser\r\n                        ? this.setState({ authUser })\r\n                        : this.setState({ authUser: null });\r\n                },\r\n            );\r\n        }\r\n        componentWillUnmount() {\r\n            this.listener();\r\n        }\r\n        render() {\r\n            return (\r\n                <AuthUserContext.Provider value={this.state.authUser}>\r\n                    <Component {...this.props} />\r\n                </AuthUserContext.Provider>\r\n            );\r\n        }\r\n    }\r\n    return withFirebase(WithAuthentication);\r\n};\r\nexport default withAuthentication;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './components/App';\r\nimport Firebase, { FirebaseContext } from './components/App/Firebase';\r\n\r\nReactDOM.render(\r\n    <FirebaseContext.Provider value={new Firebase()}>\r\n        <App />\r\n    </FirebaseContext.Provider>,\r\n    document.getElementById('root'),\r\n);\r\nserviceWorker.unregister();"],"sourceRoot":""}